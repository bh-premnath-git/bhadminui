# This workflow will build Docker Image and publish it to AWS ECR & Google Artifact Registry

name: Main -- Build Docker Image and push to repo

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

env:
  PR_NUMBER: ${{ github.event.pull_request.number }}
  DEFAULT_IMAGE_TAG: "latest"
  IMAGE_NAME: bh-admin-ui
  GIT_HASH: ${{ github.event.pull_request.head.sha }}
  BRANCH_NAME: ""
  CURRENT_APP_VER: ${{ vars.APP_VER }}
  REPOSITORY: "058264070106.dkr.ecr.us-east-1.amazonaws.com"
  PR_GAR_URL: '058264070106.dkr.ecr.us-east-1.amazonaws.com'
  MAIN_GAR_URL: '058264070106.dkr.ecr.us-east-1.amazonaws.com'
  ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
  AWS_REGION: "us-east-1"

# A wrkfow is made up of ome or more jobs that can run sequentially or parallel

jobs:
  main-build-docker-image-push-gar:
    name: Main -- Build Docker Image and push to GAR
    runs-on: [self-hosted, bh]
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Install AWS CLI v2
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
          aws --version

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Log in to Amazon ECR
        run: aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.REPOSITORY }}   

      - name: Extract Branch Name
        run: |-
          echo "BRANCH_NAME=$(GITHUB_REF#refs/heads/)" >> GITHUB_ENV
      
      - name: Checking the PR Number and Set IMAGE_TAG variable to PR_Number
        if: github.event_name == 'pull_request'
        run: |-
          CURRENT_APP_VER="${CURRENT_APP_VER:-1.0.0}"
          GITHUB_RUN_NUMBER="${GITHUB_RUN_NUMBER:-0}"
          PR_NUMBER="${PR_NUMBER:-0}"

          PR_IMAGE_TAG="$CURRENT_APP_VER-$GITHUB_RUN_NUMBER-PR.$PR_NUMBER"

          echo "IMAGE_TAG=$PR_IMAGE_TAG" >> $GITHUB_ENV
          echo "Generated IMAGE_TAG: $IMAGE_TAG"

      - name: Pull Request -- Build Docker image
        if: github.event_name == 'pull_request'
        run: |
          echo "Image Tag is: $IMAGE_TAG"
          echo "Image Name is: $IMAGE_NAME"
          docker build --no-cache \
            --build-arg PORT=5001 \
            --build-arg NEXT_PUBLIC_KEYCLOAK_URL=http://localhost:8080 \
            --build-arg NEXT_PUBLIC_KEYCLOAK_REALM=master \
            --build-arg NEXT_PUBLIC_KEYCLOAK_CLIENT_ID=bighammer-admin \
            --build-arg NEXT_PUBLIC_UI_REDIRECT_URL=http://localhost:5001 \
            --build-arg NEXT_PUBLIC_UI_APP_URL=http://localhost:5000 \
            --build-arg NEXT_PUBLIC_API_PREFIX=/api/v1/ \
            --build-arg NEXT_PUBLIC_KEYCLOAK_API_REMOTE_URL=http://localhost:8005 \
            --build-arg NODE_ENV=development \
            --tag "$PR_GAR_URL/$IMAGE_NAME:$IMAGE_TAG" .
      
      - name: Pull Request -- Push Docker image
        if: github.event_name == 'pull_request'
        run: |
          docker push "$PR_GAR_URL/$IMAGE_NAME:$IMAGE_TAG"
      
      - name: Main Branch and Set IMAGE_TAG variable
        if: github.event_name == 'push'
        run: |-
          CURRENT_APP_VER="${CURRENT_APP_VER:-1.0.0}"
          GITHUB_RUN_NUMBER="${GITHUB_RUN_NUMBER:-0}"          
          MAIN_IMAGE_TAG="$CURRENT_APP_VER-$GITHUB_RUN_NUMBER-rc"
          echo "IMAGE_TAG=$MAIN_IMAGE_TAG" >> $GITHUB_ENV
          echo "Generated IMAGE_TAG: $IMAGE_TAG"
          echo "GIT_HASH=$(git rev-parse --short $GITHUB_SHA)" >> $GITHUB_ENV
      
      - name: Main Branch -- Build Docker Image
        if: github.event_name == 'push'
        run: |-        
          docker build --no-cache \
            --build-arg PORT=5001 \
            --build-arg NEXT_PUBLIC_KEYCLOAK_URL=http://localhost:8080 \
            --build-arg NEXT_PUBLIC_KEYCLOAK_REALM=master \
            --build-arg NEXT_PUBLIC_KEYCLOAK_CLIENT_ID=bighammer-admin \
            --build-arg NEXT_PUBLIC_UI_REDIRECT_URL=http://localhost:5001 \
            --build-arg NEXT_PUBLIC_UI_APP_URL=http://localhost:5000 \
            --build-arg NEXT_PUBLIC_API_PREFIX=/api/v1/ \
            --build-arg NEXT_PUBLIC_KEYCLOAK_API_REMOTE_URL=http://localhost:8005 \
            --build-arg NODE_ENV=development \
            --tag "$MAIN_GAR_URL/$IMAGE_NAME:$IMAGE_TAG" \
            --tag "$MAIN_GAR_URL/$IMAGE_NAME:$DEFAULT_IMAGE_TAG" \
            --tag "$MAIN_GAR_URL/$IMAGE_NAME:$GIT_HASH" .
          
      - name: Main Branch -- Push Docker Image
        if: github.event_name == 'push'
        run: |-        
          docker push "$MAIN_GAR_URL/$IMAGE_NAME:$IMAGE_TAG"
          docker push "$MAIN_GAR_URL/$IMAGE_NAME:$DEFAULT_IMAGE_TAG"
          docker push "$MAIN_GAR_URL/$IMAGE_NAME:$GIT_HASH"
      
      # PR Build Success Notification
      - name: MS Teams Notification (PR Success)
        if: github.event_name == 'pull_request' && success()
        uses: jdcargile/ms-teams-notification@v1.4
        with:
          github-token: ${{ secrets.COMMON_GITHUB_TOKEN }}
          ms-teams-webhook-uri: ${{ secrets.BH_CI_PIPELINE_ALERTS }}
          notification-summary: |
            PR -- Successfully built and pushed Docker image: `${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}`
            [View GitHub Actions Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          notification-color: 00FF00

      # PR Build Failure Notification
      - name: MS Teams Notification (PR Failure)
        if: github.event_name == 'pull_request' && failure()
        uses: jdcargile/ms-teams-notification@v1.4
        with:
          github-token: ${{ secrets.COMMON_GITHUB_TOKEN }}
          ms-teams-webhook-uri: ${{ secrets.BH_CI_PIPELINE_ALERTS }}
          notification-summary: |
            PR -- Failed to build or push Docker image: `${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}`
            [View GitHub Actions Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          notification-color: FF0000
        
      # Main Branch Build Success Notification
      - name: MS Teams Notification (Main Success)
        if: github.event_name == 'push' && success()
        uses: jdcargile/ms-teams-notification@v1.4
        with:
          github-token: ${{ secrets.COMMON_GITHUB_TOKEN }}
          ms-teams-webhook-uri: ${{ secrets.BH_CI_PIPELINE_ALERTS }}
          notification-summary: |
            Main Branch -- Successfully built and pushed Docker image: `${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}`
            [View GitHub Actions Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          notification-color: 00FF00

      # Main Branch Build Failure Notification
      - name: MS Teams Notification (Main Failure)
        if: github.event_name == 'push' && failure()
        uses: jdcargile/ms-teams-notification@v1.4
        with:
          github-token: ${{ secrets.COMMON_GITHUB_TOKEN }}
          ms-teams-webhook-uri: ${{ secrets.BH_CI_PIPELINE_ALERTS }}
          notification-summary: |
            Main Branch -- Failed to build or push Docker image: `${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}`
            [View GitHub Actions Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          notification-color: FF0000
